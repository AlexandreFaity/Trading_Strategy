# Multiple linear regression model
### Let's mimic the process of building our trading model of SPY, base on the historical data of different stock markets

!pip install yfinance
import pandas as pd
import statsmodels.formula.api as smf
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from pandas.plotting import scatter_matrix
%matplotlib inline

# import all stock market data into DataFrame
# REMINDER: TRY TO IMPORT FTSE100 from UK

start_date = "2010-01-01"
end_date = "2021-10-31"

aord = yf.download("^AORD", start = start_date, end = end_date)
nikkei = yf.download("^N225", start = start_date, end = end_date)
hsi = yf.download("^HSI", start = start_date, end = end_date)
daxi = yf.download("^GDAXI", start = start_date, end = end_date)
cac40 = yf.download("^FCHI", start = start_date, end = end_date)
sp500 = yf.download("^GSPC", start = start_date, end = end_date)
dji = yf.download("^DJI", start = start_date, end = end_date)
nasdaq = yf.download("^IXIC", start = start_date, end = end_date)
spy = yf.download("SPY", start = start_date, end = end_date)

nasdaq.tail()

## Step 1: Data Munging

# Due to the timezone issues, we extract and calculate appropriate stock market data for analysis
# Indicepanel is the DataFrame of our trading model
# ideally we want to use intraday price European Markets if we want to improve the model
indicepanel=pd.DataFrame(index=spy.index)


indicepanel['spy']=spy['Open'].shift(-1)-spy['Open']
indicepanel['spy_lag1']=indicepanel['spy'].shift(1)
indicepanel['sp500']=sp500["Open"]-sp500['Open'].shift(1)
indicepanel['nasdaq']=nasdaq['Open']-nasdaq['Open'].shift(1)
indicepanel['dji']=dji['Open']-dji['Open'].shift(1)

indicepanel['cac40']=cac40['Open']-cac40['Open'].shift(1)
indicepanel['daxi']=daxi['Open']-daxi['Open'].shift(1)

indicepanel['aord']=aord['Close']-aord['Open']
indicepanel['hsi']=hsi['Close']-hsi['Open']
indicepanel['nikkei']=nikkei['Close']-nikkei['Open']
indicepanel['Price']=spy['Open']

print(indicepanel.head)

# Lets check whether do we have NaN values in indicepanel
indicepanel.isnull().sum()

# We can use method 'fillna()' from dataframe to forward filling the Nan values
# Then we can drop the reminding Nan values
indicepanel = indicepanel.fillna(method='ffill')
indicepanel = indicepanel.dropna()

# Lets check whether do we have Nan values in indicepanel now
indicepanel.isnull().sum()

print(indicepanel.shape)


## Step 2: Data Spliting

#split the data into (1)train set and (2)test set

Train = indicepanel.iloc[-2000:-1000, :]
Test = indicepanel.iloc[-1000:, :]
print(Train.shape, Test.shape)


## Step 3: Explore the train data set

# Generate scatter matrix among all stock markets (and the price of SPY) to observe the association
sm = scatter_matrix(Train, figsize=(10, 10))


## Step 4: Check the correlation of each index between spy
# Find the indice with largest correlation
corr_array = Train.iloc[:, :-1].corr()['spy']
print(corr_array)

#Pay attention to Prob (F-statistic)
#If f-stat â‰  0, at least one of predictors is useful
formula = 'spy~spy_lag1+sp500+nasdaq+dji+cac40+aord+daxi+nikkei+hsi'
lm = smf.ols(formula=formula, data=Train).fit()
lm.summary()


## Step 5: Make prediction
Train['PredictedY'] = lm.predict(Train)
Test['PredictedY'] = lm.predict(Test)
plt.scatter(Train['spy'], Train['PredictedY'])


## Step 6: Model evaluation - Statistical standard
## We can measure the performance of our model using some statistical metrics - RMSE, Adjusted R2R2

# RMSE - Root Mean Squared Error, Adjusted R^2
def adjustedMetric(data, model, model_k, yname):
    data['yhat'] = model.predict(data)
    SST = ((data[yname] - data[yname].mean())**2).sum()
    SSR = ((data['yhat'] - data[yname].mean())**2).sum()
    SSE = ((data[yname] - data['yhat'])**2).sum()
    r2 = SSR/SST
    adjustR2 = 1 - (1-r2)*(data.shape[0] - 1)/(data.shape[0] -model_k -1)
    RMSE = (SSE/(data.shape[0] -model_k -1))**0.5
    return adjustR2, RMSE

def assessTable(test, train, model, model_k, yname):
    r2test, RMSEtest = adjustedMetric(test, model, model_k, yname)
    r2train, RMSEtrain = adjustedMetric(train, model, model_k, yname)
    assessment = pd.DataFrame(index=['R2', 'RMSE'], columns=['Train', 'Test'])
    assessment['Train'] = [r2train, RMSEtrain]
    assessment['Test'] = [r2test, RMSEtest]
    return assessment

# Get the assement table for our model
assessTable(Test, Train, lm, 9, 'spy')
